#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script principal para orquestrar a execu√ß√£o completa do projeto de visualiza√ß√£o de dados.
"""

import sys
from pathlib import Path
import pandas as pd
import json
from datetime import datetime

# Adicionar o diret√≥rio 'src' ao sys.path para permitir importa√ß√µes diretas dos m√≥dulos
PROJECT_ROOT = Path(__file__).resolve().parent
SRC_DIR = PROJECT_ROOT / "src"
if str(SRC_DIR) not in sys.path:
    sys.path.insert(0, str(SRC_DIR))

# Fun√ß√£o auxiliar para verificar a exist√™ncia de artefatos
def check_outputs_exist(output_paths: list[Path], phase_name: str) -> bool:
    """Verifica se todos os caminhos de Path (arquivos ou diret√≥rios) existem e, se for um diret√≥rio, se n√£o est√° vazio."""
    print(f"üîé Verificando artefatos para a {phase_name}...")
    all_exist = True
    if not output_paths:
        print(f"  ‚ö†Ô∏è Lista de artefatos vazia para {phase_name}. Considerar como n√£o existente.")
        return False

    for path_obj in output_paths:
        if not path_obj.exists():
            print(f"  ‚è≥ Artefato n√£o encontrado: {path_obj.relative_to(PROJECT_ROOT)}")
            all_exist = False
        else:
            # Se o artefato existe, mas √© um diret√≥rio, verifica se est√° vazio
            if path_obj.is_dir():
                if not any(path_obj.iterdir()):
                    print(f"  ‚è≥ Artefato encontrado, mas o diret√≥rio est√° vazio: {path_obj.relative_to(PROJECT_ROOT)}")
                    all_exist = False
                else:
                    print(f"  ‚úÖ Artefato (diret√≥rio com conte√∫do) encontrado: {path_obj.relative_to(PROJECT_ROOT)}")
            else:
                 # Se for um arquivo, a exist√™ncia j√° basta.
                 print(f"  ‚úÖ Artefato (arquivo) encontrado: {path_obj.relative_to(PROJECT_ROOT)}")
    
    if all_exist:
        print(f"üëç Todos os artefatos para {phase_name} encontrados.")
    else:
        print(f"‚ùó Alguns artefatos para {phase_name} n√£o foram encontrados. A fase ser√° executada.")
    return all_exist

try:
    from visualization import plot_generator
    # from app import dashboard_ui # Comentado o antigo dashboard Tkinter
    from app.gemini_style_dashboard import GeminiStyleDashboard # Importando o novo dashboard
    from PySide6.QtWidgets import QApplication # Importa QApplication aqui
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    print(f"Verifique se a estrutura de diret√≥rios e os arquivos __init__.py est√£o corretos em '{SRC_DIR}'.")
    sys.exit(1)

def ensure_graphs_cache():
    """Garante que o cache de gr√°ficos est√° atualizado antes de iniciar o dashboard."""
    print("üîç Verificando cache de gr√°ficos...")
    
    try:
        # Importar apenas o necess√°rio para verifica√ß√£o
        data_path = PROJECT_ROOT / "data" / "processed" / "dataset_unificado.csv"
        cache_dir = PROJECT_ROOT / "results" / "visualizations" / "dashboard_cache"
        cache_info_path = cache_dir / "cache_info.json"
        
        # Verificar se dados existem
        if not data_path.exists():
            print("‚ö†Ô∏è Dataset n√£o encontrado. Pule a gera√ß√£o de cache.")
            return
            
        # Carregar dados para verifica√ß√£o
        df = pd.read_csv(data_path)
        if df.empty:
            print("‚ö†Ô∏è Dataset vazio. Pule a gera√ß√£o de cache.")
            return
            
        anos_unicos = sorted(df['ano'].dropna().unique())
        data_modification_time = data_path.stat().st_mtime
        
        # Verificar se o cache existe e est√° atualizado
        cache_valid = False
        if cache_info_path.exists():
            try:
                with open(cache_info_path, 'r') as f:
                    cache_info = json.load(f)
                    
                if cache_info.get('data_modification_time', 0) >= data_modification_time:
                    # Verificar se todos os arquivos esperados existem
                    all_files_exist = True
                    
                    for ano in anos_unicos:
                        expected_files = [
                            f"mapa_coropletico_{ano}.html",
                            f"grafico_pizza_{ano}.html", 
                            f"grafico_bolhas_{ano}.html",
                            f"treemap_{ano}.html"
                        ]
                        
                        for filename in expected_files:
                            if not (cache_dir / filename).exists():
                                all_files_exist = False
                                break
                        
                        if not all_files_exist:
                            break
                    
                    cache_valid = all_files_exist
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao verificar cache: {e}")
                cache_valid = False
        
        if not cache_valid:
            print("üîÑ Gerando cache de gr√°ficos...")
            print("‚è≥ Este processo pode levar alguns minutos na primeira execu√ß√£o...")
            
            # Criar QApplication tempor√°ria para gera√ß√£o de cache
            from PySide6.QtWidgets import QApplication
            import sys
            
            # Verificar se j√° existe uma QApplication
            app = QApplication.instance()
            if app is None:
                app = QApplication(sys.argv)
                app_created = True
            else:
                app_created = False
            
            try:
                # Importar e executar gera√ß√£o de cache
                from app.widgets.graphs_container import GraphsContainerWidget
                
                # Criar inst√¢ncia tempor√°ria apenas para gerar cache
                temp_widget = GraphsContainerWidget()
                
                print(f"‚úÖ Cache de gr√°ficos gerado com sucesso!")
                print(f"üìä Total de gr√°ficos: {len(anos_unicos) * 4}")
                
            finally:
                # Limpar widget tempor√°rio
                if 'temp_widget' in locals():
                    temp_widget.deleteLater()
                
                # Se criamos a aplica√ß√£o, n√£o precisamos fech√°-la aqui
                # pois ser√° reutilizada no dashboard
        else:
            print("‚úÖ Cache de gr√°ficos v√°lido encontrado.")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar/gerar cache: {e}")
        print("‚ö†Ô∏è Dashboard ser√° iniciado sem cache (pode ser mais lento)")

def run_complete_pipeline():
    """Verifica se os dados necess√°rios existem. Pipeline simplificado."""
    print("üöÄ VERIFICANDO DADOS DO SISTEMA...")
    print("=" * 50)

    # Verificar se os dados essenciais existem
    required_files = [
        PROJECT_ROOT / "data/raw/idh_oficial_real.csv",
        PROJECT_ROOT / "data/raw/despesas_publicas_oficiais_real.csv",
        PROJECT_ROOT / "data/processed/dataset_unificado.csv",
        PROJECT_ROOT / "data/processed/projeto_visualizacao.db"
    ]
    
    print("\nüî∑ Verificando arquivos essenciais...")
    all_files_exist = True
    
    for file_path in required_files:
        if file_path.exists():
            print(f"  ‚úÖ {file_path.relative_to(PROJECT_ROOT)}")
        else:
            print(f"  ‚ùå {file_path.relative_to(PROJECT_ROOT)} - ARQUIVO AUSENTE")
            all_files_exist = False
    
    # Verificar diret√≥rios de resultados
    result_dirs = [
        PROJECT_ROOT / "results/exploratory_analysis",
        PROJECT_ROOT / "results/advanced_analysis", 
        PROJECT_ROOT / "results/visualizations"
    ]
    
    print("\nüî∑ Verificando diret√≥rios de resultados...")
    for dir_path in result_dirs:
        if dir_path.exists() and any(dir_path.iterdir()):
            print(f"  ‚úÖ {dir_path.relative_to(PROJECT_ROOT)} (com conte√∫do)")
        elif dir_path.exists():
            print(f"  ‚ö†Ô∏è {dir_path.relative_to(PROJECT_ROOT)} (vazio)")
        else:
            print(f"  ‚ùå {dir_path.relative_to(PROJECT_ROOT)} - DIRET√ìRIO AUSENTE")
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"     ‚û§ Diret√≥rio criado automaticamente")

    # Executar gera√ß√£o de visualiza√ß√µes se os dados existem
    if all_files_exist:
        print("\nüî∑ FASE 3: Gera√ß√£o de Visualiza√ß√µes Est√°ticas...")
        try:
            plot_generator.main()
            print("‚úÖ Visualiza√ß√µes geradas com sucesso.")
        except Exception as e_f3:
            print(f"‚ùå Erro na gera√ß√£o de visualiza√ß√µes: {e_f3}")
            print("‚ö†Ô∏è Sistema continuar√° sem visualiza√ß√µes est√°ticas.")
    else:
        print("\n‚ö†Ô∏è Alguns arquivos essenciais est√£o ausentes.")
        print("   O sistema funcionar√° apenas com os dados dispon√≠veis.")

    print("\nüéâ VERIFICA√á√ÉO DE DADOS CONCLU√çDA!")
    print("=" * 50)
    return True

def start_dashboard_application():
    """Inicia a aplica√ß√£o de Dashboard Interativo."""
    print("üöÄ Iniciando Dashboard Interativo...")
    try:
        # Verificar se j√° existe uma QApplication (criada durante cache)
        q_app = QApplication.instance()
        if q_app is None:
            q_app = QApplication(sys.argv)
        
        # Instanciar e mostrar o dashboard
        window = GeminiStyleDashboard()
        window.show()
        
        print("‚úÖ Dashboard inicializado com sucesso!")
        print("üì± Interface dispon√≠vel - voc√™ pode come√ßar a usar o sistema.")
        
        sys.exit(q_app.exec())

    except Exception as e:
        print(f"‚ùå Erro ao iniciar o Dashboard: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Fun√ß√£o principal do sistema."""
    print("=" * 60)
    print("üöÄ INICIANDO SISTEMA DE VISUALIZA√á√ÉO DE DADOS")
    print("=" * 60)
    
    # Verificar se os dados processados existem
    data_path = PROJECT_ROOT / "data" / "processed" / "dataset_unificado.csv"
    if not data_path.exists():
        print("Dados processados n√£o encontrados. Executando pipeline completo...")
        pipeline_success = run_complete_pipeline()
    else:
        print("Dados processados encontrados. Verificando integridade...")
        
        # Verificar se os dados est√£o √≠ntegros
        try:
            df = pd.read_csv(data_path)
            if df.empty or len(df) < 50:  # Verifica√ß√£o b√°sica de integridade
                print("Dados incompletos. Executando pipeline...")
                pipeline_success = run_complete_pipeline()
            else:
                print(f"Dados v√°lidos encontrados ({len(df)} registros).")
                pipeline_success = True
        except Exception as e:
            print(f"Erro ao verificar dados: {e}")
            print("Executando pipeline completo...")
            pipeline_success = run_complete_pipeline()

    if pipeline_success:
        print("\nPipeline de dados verificado/conclu√≠do com sucesso.")
        
        # 1. Verificar e gerar cache de gr√°ficos ANTES da UI
        ensure_graphs_cache()
        
        print("\nüñ•Ô∏è Iniciando interface do dashboard...")
        start_dashboard_application()
    else:
        print("\n‚ùå O pipeline de dados n√£o foi conclu√≠do com sucesso. O Dashboard n√£o ser√° iniciado.")

    print("\nPrograma finalizado.")

if __name__ == "__main__":
    main() 