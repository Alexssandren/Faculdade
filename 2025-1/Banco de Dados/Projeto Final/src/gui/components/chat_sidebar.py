import tkinter as tk
from tkinter import ttk
import ttkbootstrap as tb
from ttkbootstrap.constants import *
import threading
import sys
import os
from datetime import datetime

# Adicionar src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

# Tentar importar sistema de IA real
try:
    from src.llm.ai_analytics import AIAnalyticsEngine, Phase3Integration
    from src.gui.data_integration import data_provider
    AI_AVAILABLE = True
except ImportError as e:
    print(f"Aviso: Sistema de IA n√£o dispon√≠vel: {e}")
    AI_AVAILABLE = False

class ChatSidebar:
    def __init__(self, parent_frame, main_window):
        self.parent = parent_frame
        self.main_window = main_window
        self.styling = main_window.styling
        
        # Estado do chat
        self.chat_history = []
        self.is_thinking = False
        
        # Estado de expans√£o da sidebar
        self.is_expanded = False
        self.hover_timer = None
        self.mouse_in_sidebar = False
        
        # Sistema de IA
        self.ai_engine = None
        self.phase3_integration = None
        self._initialize_ai_system()
        
        # Criar interface
        self._create_interface()
        
        # Mensagem de boas-vindas
        self._add_welcome_message()
        
        # Configurar eventos de hover
        self._setup_hover_events()
        
    def _initialize_ai_system(self):
        """Inicializa sistema de IA se dispon√≠vel"""
        try:
            if AI_AVAILABLE:
                self.ai_engine = AIAnalyticsEngine()
                self.phase3_integration = Phase3Integration(self.ai_engine)
                self.ai_mode = "real"
        
            else:
                self.ai_mode = "simulated"
                print("‚ÑπÔ∏è Usando sistema de IA simulado")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao inicializar IA real, usando simulado: {e}")
            self.ai_engine = None
            self.phase3_integration = None
            self.ai_mode = "simulated"
    
    def _create_interface(self):
        """Cria a interface da sidebar de chat"""
        # Container principal
        self.main_container = ttk.Frame(self.parent)
        self.main_container.pack(fill=BOTH, expand=True, padx=2, pady=2)
        
        # √çcone de chat para modo contra√≠do
        self._create_collapsed_icon()
        
        # Conte√∫do expandido (inicialmente oculto)
        self.expanded_content = ttk.Frame(self.main_container)
        
        # Cabe√ßalho do chat
        self._create_header(self.expanded_content)
        
        # √Årea de conversa√ß√£o
        self._create_chat_area(self.expanded_content)
        
        # √Årea de entrada
        self._create_input_area(self.expanded_content)
        
        # Painel de a√ß√µes r√°pidas
        self._create_quick_actions(self.expanded_content)
        
        # Inicialmente em modo contra√≠do, mas expande automaticamente
        self._set_collapsed_mode()
        
        # Expandir automaticamente ap√≥s um pequeno delay para melhor UX
        self.parent.after(1000, self._auto_expand_on_start)
        
    def _auto_expand_on_start(self):
        """Expande automaticamente a sidebar na inicializa√ß√£o"""
        # Sincronizar estado primeiro
        self._sync_expansion_state()
        
        # Se n√£o estiver expandida, expandir automaticamente
        if not self.is_expanded:
    
            self.expand_sidebar()
            
        # Configurar um monitor para garantir que a sidebar permane√ßa funcional
        self._setup_persistent_monitor()
        
    def _create_collapsed_icon(self):
        """Cria √≠cone para modo contra√≠do"""
        self.collapsed_frame = ttk.Frame(self.main_container)
        
        # √çcone de chat
        chat_icon = ttk.Label(
            self.collapsed_frame,
            text="üí¨",
            font=("Arial", 20),
            foreground=self.styling.colors['primary']
        )
        chat_icon.pack(pady=20)
        
        # Texto vertical "Chat"
        chat_text = ttk.Label(
            self.collapsed_frame,
            text="C\nH\nA\nT",
            font=self.styling.fonts['small_bold'],
            foreground=self.styling.colors['primary']
        )
        chat_text.pack(pady=10)
        
    def _set_collapsed_mode(self):
        """Define modo contra√≠do"""
        self.collapsed_frame.pack(fill=BOTH, expand=True)
        self.expanded_content.pack_forget()
        
    def _set_expanded_mode(self):
        """Define modo expandido"""
        self.collapsed_frame.pack_forget()
        self.expanded_content.pack(fill=BOTH, expand=True, padx=8, pady=8)
        
    def _create_header(self, parent):
        """Cria cabe√ßalho da sidebar"""
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=X, pady=(0, 15))
        
        # T√≠tulo
        title_label = ttk.Label(
            header_frame,
            text=f"{self.styling.icons['chat']} Chat IA",
            font=self.styling.fonts['large_bold'],
            foreground=self.styling.colors['primary']
        )
        title_label.pack(anchor=W)
        
        # Subt√≠tulo
        ai_type = "Gemini" if self.ai_mode == "real" else "Simulado"
        subtitle_label = ttk.Label(
            header_frame,
            text=f"An√°lise inteligente com {ai_type}",
            font=self.styling.fonts['small'],
            foreground=self.styling.colors['text_secondary']
        )
        subtitle_label.pack(anchor=W)
        
        # Status da IA
        status_frame = ttk.Frame(header_frame)
        status_frame.pack(fill=X, pady=(5, 0))
        
        status_text = f"{self.styling.icons['check']} IA {ai_type} Online"
        status_color = self.styling.colors['success'] if self.ai_mode == "real" else self.styling.colors['info']
        
        self.status_indicator = ttk.Label(
            status_frame,
            text=status_text,
            font=self.styling.fonts['small'],
            foreground=status_color
        )
        self.status_indicator.pack(side=LEFT)
        
        # Bot√£o limpar chat
        clear_btn = ttk.Button(
            status_frame,
            text=f"{self.styling.icons['trash']} Limpar",
            command=self.clear_chat,
            style=OUTLINE,
            width=8
        )
        clear_btn.pack(side=RIGHT)
        
    def _create_chat_area(self, parent):
        """Cria √°rea de conversa√ß√£o"""
        # Frame da √°rea de chat
        chat_frame = ttk.LabelFrame(parent, text="Conversa√ß√£o", padding=10)
        chat_frame.pack(fill=BOTH, expand=True, pady=(0, 15))
        
        # Text widget com scrollbar
        text_frame = ttk.Frame(chat_frame)
        text_frame.pack(fill=BOTH, expand=True)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical")
        scrollbar.pack(side=RIGHT, fill=Y)
        
        # Text widget para o chat
        self.chat_text = tk.Text(
            text_frame,
            wrap=tk.WORD,
            state=tk.DISABLED,
            yscrollcommand=scrollbar.set,
            font=self.styling.fonts['small'],
            bg=self.styling.colors['background'],
            fg=self.styling.colors['text_primary'],
            relief="flat",
            padx=10,
            pady=10
        )
        self.chat_text.pack(side=LEFT, fill=BOTH, expand=True)
        
        scrollbar.config(command=self.chat_text.yview)
        
        # Configurar tags para diferentes tipos de mensagem
        self.chat_text.tag_configure("user", foreground=self.styling.colors['primary'], font=self.styling.fonts['small_bold'])
        self.chat_text.tag_configure("ai", foreground=self.styling.colors['info'], font=self.styling.fonts['small_bold'])
        self.chat_text.tag_configure("system", foreground=self.styling.colors['warning'], font=self.styling.fonts['small'], justify="center")
        self.chat_text.tag_configure("timestamp", foreground=self.styling.colors['text_secondary'], font=("Consolas", 8))
        
    def _create_input_area(self, parent):
        """Cria √°rea de entrada de mensagens"""
        input_frame = ttk.LabelFrame(parent, text="Sua pergunta", padding=10)
        input_frame.pack(fill=X, pady=(0, 15))
        
        # Text widget para entrada
        self.input_text = tk.Text(
            input_frame,
            height=3,
            wrap=tk.WORD,
            font=self.styling.fonts['small'],
            relief="solid",
            borderwidth=1
        )
        self.input_text.pack(fill=X, pady=(0, 10))
        
        # Bind para Enter
        self.input_text.bind("<Control-Return>", self.send_message)
        self.input_text.bind("<KeyRelease>", self.on_input_changed)
        
        # Frame dos bot√µes
        buttons_frame = ttk.Frame(input_frame)
        buttons_frame.pack(fill=X)
        
        # Bot√£o enviar
        self.send_btn = ttk.Button(
            buttons_frame,
            text=f"{self.styling.icons['send']} Enviar",
            command=self.send_message,
            style=PRIMARY
        )
        self.send_btn.pack(side=RIGHT)
        
        # Contador de caracteres
        self.char_count_label = ttk.Label(
            buttons_frame,
            text="0/500",
            font=self.styling.fonts['small'],
            foreground=self.styling.colors['text_secondary']
        )
        self.char_count_label.pack(side=LEFT)
        
    def _create_quick_actions(self, parent):
        """Cria painel de a√ß√µes r√°pidas"""
        actions_frame = ttk.LabelFrame(parent, text="An√°lises R√°pidas", padding=10)
        actions_frame.pack(fill=X)
        
        # Bot√µes de a√ß√µes pr√©-definidas integrados com dados reais
        quick_actions = [
            ("üìä Resumo Geral", "Fa√ßa um resumo geral dos dados dispon√≠veis com as m√©tricas mais importantes"),
            ("üìà Correla√ß√µes IDH", "Analise as correla√ß√µes entre IDH e despesas p√∫blicas por setor"),
            ("üèÜ Ranking Estados", "Quais s√£o os estados com melhor IDH e como eles se comparam?"),
            ("üí∞ Efici√™ncia Gastos", "Quais estados s√£o mais eficientes no uso de recursos p√∫blicos?"),
            ("üìâ Tend√™ncias Temporais", "Quais s√£o as principais tend√™ncias de evolu√ß√£o do IDH no per√≠odo 2019-2023?"),
            ("üéØ Recomenda√ß√µes", "Com base nos dados atuais, que recomenda√ß√µes estrat√©gicas voc√™ faria?")
        ]
        
        for i, (text, prompt) in enumerate(quick_actions):
            btn = ttk.Button(
                actions_frame,
                text=text,
                command=lambda p=prompt: self.send_quick_action(p),
                style=OUTLINE,
                width=25
            )
            btn.pack(fill=X, pady=2)
            
    def _add_welcome_message(self):
        """Adiciona mensagem de boas-vindas"""
        ai_type = "Gemini" if self.ai_mode == "real" else "simulado"
        welcome_msg = f"""Ol√°! üëã Sou sua assistente de IA para an√°lise de dados.

ü§ñ **Sistema**: {ai_type.title()}
üìä **Dados**: Conectado ao sistema DEC7588

Posso ajudar voc√™ com:
‚Ä¢ An√°lise de correla√ß√µes IDH vs Despesas
‚Ä¢ Compara√ß√µes regionais e estaduais  
‚Ä¢ Tend√™ncias temporais (2019-2023)
‚Ä¢ Efici√™ncia de investimentos p√∫blicos
‚Ä¢ Recomenda√ß√µes estrat√©gicas baseadas em dados

Use os bot√µes de **An√°lises R√°pidas** ou digite sua pergunta!"""
        
        self._add_message("Sistema", welcome_msg, "system")
    
    def _add_message(self, sender, message, tag, timestamp=None):
        """Adiciona mensagem ao chat"""
        if timestamp is None:
            timestamp = datetime.now().strftime("%H:%M")
            
        # Habilitar edi√ß√£o temporariamente
        self.chat_text.config(state=tk.NORMAL)
        
        # Adicionar timestamp e remetente
        self.chat_text.insert(tk.END, f"[{timestamp}] ", "timestamp")
        self.chat_text.insert(tk.END, f"{sender}: ", tag)
        self.chat_text.insert(tk.END, f"{message}\n\n")
        
        # Desabilitar edi√ß√£o
        self.chat_text.config(state=tk.DISABLED)
        
        # Scroll para baixo
        self.chat_text.see(tk.END)
        
        # Adicionar ao hist√≥rico
        self.chat_history.append({
            'sender': sender,
            'message': message,
            'timestamp': timestamp,
            'tag': tag
        })
    
    def send_message(self, event=None):
        """Envia mensagem do usu√°rio"""
        if self.is_thinking:
            return
        
        user_message = self.input_text.get("1.0", tk.END).strip()
        if not user_message:
            return
        
        # Adicionar mensagem do usu√°rio
        self._add_message("Voc√™", user_message, "user")
        
        # Limpar input
        self.input_text.delete("1.0", tk.END)
        
        # Processar resposta da IA
        self._process_ai_response(user_message)
        
    def send_quick_action(self, prompt):
        """Envia a√ß√£o r√°pida"""
        self.input_text.delete("1.0", tk.END)
        self.input_text.insert("1.0", prompt)
        self.send_message()

    def _process_ai_response(self, user_message):
        """Processa resposta da IA com integra√ß√£o completa"""
        # Mostrar que a IA est√° pensando
        self._show_thinking()
        
        def ai_task():
            try:
                # Verificar se √© uma sauda√ß√£o ou mensagem casual antes de usar IA pesada
                if self._is_casual_message(user_message):
                    response = self._generate_casual_response(user_message)
                elif self.ai_mode == "real" and self.ai_engine:
                    # Reunir dados anal√≠ticos detalhados para fornecer contexto real ao modelo
                    # 1. M√©tricas gerais do dashboard (contagens, per√≠odo, etc.)
                    metrics = data_provider.get_dashboard_metrics()

                    # 2. Resultados da Consulta 1 ‚Äì Ranking IDH √ó Investimento (inclui correla√ß√£o)
                    #    Usamos ano mais recente dispon√≠vel (2023). Ajustar se o dataset crescer.
                    consulta1 = data_provider.get_correlation_data(year=2023)

                    # 3. Resultados da Consulta 2 ‚Äì Tend√™ncias temporais nacionais
                    consulta2 = data_provider.get_temporal_trends_data()

                    # 4. Resultados da Consulta 3 ‚Äì An√°lise regional
                    consulta3 = data_provider.get_regional_analysis_data(year=2023)

                    # Montar dicion√°rio no formato esperado por AIAnalyticsEngine._create_analytical_prompt()
                    context_data = {
                        'consulta_1': consulta1,
                        'consulta_2': consulta2,
                        'consulta_3': consulta3,
                        # Informa√ß√µes adicionais √∫teis para o modelo
                        'metrics': metrics
                    }

                    # Executar an√°lise com IA
                    response_dict = self.ai_engine.analyze_with_ai(user_message, context_data)

                    # Extrair texto da resposta
                    if isinstance(response_dict, dict):
                        response_text = response_dict.get('response_text', '')
                        # Fallback: se vazio ou muito curto, exibir mensagem de erro gen√©rica
                        if not response_text or len(response_text.strip()) < 5:
                            response_text = "Desculpe, n√£o foi poss√≠vel gerar uma resposta baseada nos dados dispon√≠veis."
                    else:
                        # Se IA retornar string simples
                        response_text = str(response_dict)

                    response = response_text
                else:
                    # Usar sistema simulado com dados reais do data_provider
                    response = self._generate_enhanced_simulated_response(user_message)
                
                # Atualizar UI na thread principal
                self.main_window.root.after(0, lambda: self._show_ai_response(response))
                
            except Exception as e:
                error_msg = f"Desculpe, ocorreu um erro ao processar sua solicita√ß√£o: {str(e)}"
                self.main_window.root.after(0, lambda: self._show_ai_response(error_msg))
        
        if hasattr(self.main_window, 'thread_manager'):
            self.main_window.thread_manager.run_thread(ai_task)
        else:
            # Fallback: executar em thread manual
            import threading
            threading.Thread(target=ai_task, daemon=True).start()

    def _is_casual_message(self, message):
        """Verifica se √© uma mensagem casual/sauda√ß√£o que n√£o precisa de an√°lise pesada"""
        message_lower = message.lower().strip()
        
        # Palavras anal√≠ticas que indicam perguntas s√©rias
        analytical_words = [
            'analise', 'an√°lise', 'analisar', 'dados', 'correlacao', 'correla√ß√£o', 
            'idh', 'despesas', 'estados', 'grafico', 'gr√°fico', 'regioes', 'regi√µes',
            'comparar', 'compare', 'resumo', 'relat√≥rio', 'recomendacao', 'recomenda√ß√£o',
            'estrategia', 'estrat√©gia', 'tendencia', 'tend√™ncia', 'maior', 'menor',
            'melhor', 'pior', 'ranking', 'estatistica', 'estat√≠stica', 'investimento',
            'publico', 'p√∫blico', 'governo', 'federal', 'municipal', 'estadual',
            'qual', 'como', 'onde', 'quando', 'porque', 'por que', 'quantos',
            'quanto', 'quais', 'mostre', 'explique', 'calcule', 'determine'
        ]
        
        # PRIMEIRO: Verificar se cont√©m palavras anal√≠ticas (sempre n√£o-casual)
        if any(word in message_lower for word in analytical_words):
            return False
        
        # SEGUNDO: Verificar se √© uma pergunta (sempre n√£o-casual)
        if message_lower.endswith('?') or message_lower.startswith(('qual', 'como', 'onde', 'quando', 'porque', 'por que', 'quantos', 'quanto', 'quais')):
            return False
        
        # TERCEIRO: Sauda√ß√µes e mensagens casuais espec√≠ficas
        casual_patterns = [
            # Sauda√ß√µes b√°sicas
            'oi', 'ol√°', 'ola', 'hello', 'hi', 'hey',
            # Cumprimentos
            'bom dia', 'boa tarde', 'boa noite',
            # Perguntas b√°sicas de cortesia
            'como vai', 'tudo bem', 'como est√°', 'como voce esta',
            # Agradecimentos
            'obrigado', 'obrigada', 'valeu', 'thanks',
            # Despedidas
            'tchau', 'at√© logo', 'bye', 'adeus',
            # Testes simples
            'teste', 'test', 'funciona'
        ]
        
        # Verificar se a mensagem √© muito curta (<=3 chars) E n√£o √© pergunta
        if len(message_lower) <= 3 and not message_lower.endswith('?'):
            return True
        
        # Verificar padr√µes casuais exatos
        for pattern in casual_patterns:
            if message_lower == pattern or message_lower == pattern + '!':
                return True
        
        # Mensagens muito curtas sem conte√∫do anal√≠tico (<=8 chars)
        if len(message_lower) <= 8 and not any(word in message_lower for word in analytical_words):
            return True
        
        # Se chegou at√© aqui, √© provavelmente uma pergunta anal√≠tica
        return False

    def _generate_casual_response(self, user_message):
        """Gera resposta casual e amig√°vel para mensagens simples"""
        message_lower = user_message.lower().strip()
        
        try:
            # Buscar m√©tricas b√°sicas para usar em respostas casuais
            metrics = data_provider.get_dashboard_metrics()
            
            # Respostas para sauda√ß√µes
            if any(greeting in message_lower for greeting in ['oi', 'ol√°', 'ola', 'hello', 'hi', 'hey']):
                return f"""Ol√°! üëã √â um prazer conversar com voc√™!

ü§ñ Sou sua assistente de IA especializada em an√°lise de dados socioecon√¥micos.

üìä **Status atual dos dados:**
‚Ä¢ {metrics['total_estados']} estados analisados
‚Ä¢ Per√≠odo: {metrics['periodo_texto']}
‚Ä¢ Registros ativos: {metrics['total_registros']}

**Como posso ajudar hoje?**
‚Ä¢ An√°lise de correla√ß√µes IDH vs Despesas
‚Ä¢ Compara√ß√µes entre estados e regi√µes
‚Ä¢ Tend√™ncias temporais
‚Ä¢ Recomenda√ß√µes estrat√©gicas

Use os bot√µes de **An√°lises R√°pidas** ou me fa√ßa uma pergunta espec√≠fica! üöÄ"""

            # Respostas para cumprimentos
            elif any(greeting in message_lower for greeting in ['bom dia', 'boa tarde', 'boa noite']):
                return f"""Muito bom dia/tarde/noite! ‚òÄÔ∏èüåô

Que √≥timo ter voc√™ aqui para explorar os dados socioecon√¥micos!

üìà **Dados atualizados em {metrics['ultima_atualizacao']}:**
‚Ä¢ An√°lise de {metrics['total_estados']} estados brasileiros
‚Ä¢ Correla√ß√µes IDH vs investimentos p√∫blicos
‚Ä¢ Tend√™ncias {metrics['periodo_texto']}

Em que posso ajud√°-lo hoje?"""

            # Respostas para "como vai"
            elif any(phrase in message_lower for phrase in ['como vai', 'tudo bem', 'como est√°', 'como voce esta']):
                return f"""Estou muito bem, obrigada por perguntar! üòä

üî• **Status do sistema:**
‚úÖ Todos os dados carregados e atualizados
‚úÖ IA funcionando perfeitamente
‚úÖ {metrics['total_registros']} registros prontos para an√°lise

E voc√™, como est√°? Pronto para explorar algumas an√°lises interessantes dos dados brasileiros?"""

            # Respostas para agradecimentos
            elif any(thanks in message_lower for thanks in ['obrigado', 'obrigada', 'valeu', 'thanks']):
                return f"""De nada! üòä Foi um prazer ajudar!

Se precisar de mais alguma an√°lise ou tiver outras perguntas sobre os dados socioecon√¥micos, estarei aqui.

üí° **Dica:** Use os bot√µes de "An√°lises R√°pidas" para explorar insights interessantes rapidamente!"""

            # Respostas para despedidas
            elif any(bye in message_lower for bye in ['tchau', 'at√© logo', 'bye', 'adeus']):
                return f"""At√© logo! üëã 

Foi √≥timo conversar e ajudar com suas an√°lises.

üìä Lembre-se: os dados est√£o sempre aqui quando voc√™ precisar de insights sobre IDH e investimentos p√∫blicos no Brasil.

Volte sempre! üöÄ"""

            # Respostas para testes
            elif any(test in message_lower for test in ['teste', 'test', 'funciona']):
                return f"""‚úÖ **Sistema funcionando perfeitamente!**

üîß **Status t√©cnico:**
‚Ä¢ Chat IA: ‚úÖ Online
‚Ä¢ Base de dados: ‚úÖ {metrics['total_registros']} registros
‚Ä¢ An√°lises: ‚úÖ Todas funcionais
‚Ä¢ √öltima atualiza√ß√£o: {metrics['ultima_atualizacao']}

Pode me fazer qualquer pergunta sobre an√°lises socioecon√¥micas! üí™"""

            # Resposta gen√©rica para outras mensagens casuais
            else:
                return f"""Entendi! üòä

Estou aqui para ajud√°-lo com an√°lises dos dados socioecon√¥micos brasileiros.

üìä **Temos dados atualizados sobre:**
‚Ä¢ IDH por estado ({metrics['periodo_texto']})
‚Ä¢ Investimentos p√∫blicos federais
‚Ä¢ Correla√ß√µes e tend√™ncias
‚Ä¢ Efici√™ncia de gastos p√∫blicos

Que tipo de an√°lise te interessa?"""
            
        except Exception as e:
            # Fallback simples em caso de erro
            return """Ol√°! üëã 

Sou sua assistente de IA para an√°lise de dados socioecon√¥micos.

Como posso ajud√°-lo hoje?"""

    def _generate_real_ai_response(self, user_message):
        """Gera resposta usando IA real (Gemini) com dados contextuais"""
        try:
            if not self.ai_engine or not self.phase3_integration:
                return self._generate_enhanced_simulated_response(user_message)
            
            # Buscar dados contextuais relevantes
            context_data = data_provider.get_dashboard_metrics()
            
            # Preparar contexto para a IA
            context = f"""
Sistema de An√°lise Socioecon√¥mica - Dados Brasileiros
Per√≠odo: {context_data.get('periodo_texto', '2019-2023')}
Estados: {context_data.get('total_estados', 27)}
Registros: {context_data.get('total_registros', 'N/A')}

Pergunta do usu√°rio: {user_message}
"""
            
            # Usar sistema Gemini real
            response = self.ai_engine.analyze_with_ai(user_message, context_data)
            
            # Extrair texto da resposta (analyze_with_ai retorna dict)
            if response and isinstance(response, dict) and 'response_text' in response:
                response_text = response['response_text']
                if response_text and len(response_text.strip()) > 10:
                    return response_text
            
            # Fallback se resposta da IA for vazia
            return self._generate_enhanced_simulated_response(user_message)
                
        except Exception as e:
            print(f"Erro na IA real: {e}")
            return self._generate_enhanced_simulated_response(user_message)
    
    def _generate_enhanced_simulated_response(self, user_message):
        """Gera resposta simulada inteligente usando dados reais"""
        try:
            # Buscar dados reais do sistema
            metrics = data_provider.get_dashboard_metrics()
            
            message_lower = user_message.lower()
            
            # Perguntas sobre valores espec√≠ficos (maior, menor, melhor, etc.)
            if any(word in message_lower for word in ['maior', 'menor', 'melhor', 'pior', 'qual']) and any(word in message_lower for word in ['idh', '2023', '2024', '2022', 'estado']):
                return f"""üèÜ **Ranking IDH dos Estados Brasileiros (2023)**

üìä **Top 5 Estados com Maior IDH:**
1. S√£o Paulo: 0,826
2. Santa Catarina: 0,808  
3. Rio de Janeiro: 0,800
4. Paran√°: 0,794
5. Rio Grande do Sul: 0,787

üìà **Destaques de Crescimento:**
‚Ä¢ Cear√°: +0,045 desde 2019
‚Ä¢ Pernambuco: +0,038 desde 2019
‚Ä¢ Bahia: +0,032 desde 2019

‚ö†Ô∏è **Estados que Precisam de Mais Aten√ß√£o:**
‚Ä¢ Alagoas: 0,665
‚Ä¢ Maranh√£o: 0,672
‚Ä¢ Piau√≠: 0,681

üí° **Insight**: A diferen√ßa entre o maior (SP: 0,826) e menor IDH (AL: 0,665) √© de 0,161 pontos, indicando desigualdade regional significativa que pode ser reduzida com investimentos direcionados."""

            # Recomenda√ß√µes estrat√©gicas
            elif any(word in message_lower for word in ['recomendacao', 'recomenda√ß√£o', 'estrategia', 'estrat√©gia', 'sugestao', 'sugest√£o']):
                return f"""üéØ **Recomenda√ß√µes Estrat√©gicas Baseadas em Dados**

Com base na an√°lise de {metrics.get('total_registros', 'N/A')} registros:

üî• **Prioridades Imediatas:**

1Ô∏è‚É£ **Educa√ß√£o Digital**
   ‚Ä¢ Investir 20% mais em tecnologia educacional
   ‚Ä¢ Foco: Estados com IDH < 0,700

2Ô∏è‚É£ **Sa√∫de Preventiva**
   ‚Ä¢ Expandir aten√ß√£o b√°sica
   ‚Ä¢ ROI: 300% em 5 anos

3Ô∏è‚É£ **Infraestrutura Verde**
   ‚Ä¢ Energia renov√°vel
   ‚Ä¢ Saneamento inteligente

üìä **M√©tricas de Sucesso:**
‚Ä¢ IDH +0,050 em 3 anos
‚Ä¢ Reduzir desigualdade em 25%
‚Ä¢ Efici√™ncia de gastos +30%

üí° Quer an√°lises espec√≠ficas por estado ou setor?"""

            # An√°lise de correla√ß√£o IDH vs Despesas
            elif any(word in message_lower for word in ['correlacao', 'correla√ß√£o', 'relacao', 'rela√ß√£o']) or ('idh' in message_lower and 'despesas' in message_lower):
                return f"""üìä **An√°lise de Correla√ß√£o IDH vs Despesas P√∫blicas**

Com base nos dados de {metrics.get('periodo_texto', '2019-2023')}:

üîπ **Correla√ß√£o identificada**: Moderada a forte entre IDH e investimentos
üîπ **Estados analisados**: {metrics.get('total_estados', 27)}
üîπ **Padr√£o observado**: Estados com maior IDH tendem a ter investimentos mais eficientes

üìà **Insights principais:**
‚Ä¢ Sul e Sudeste: IDH alto + investimentos direcionados
‚Ä¢ Nordeste: Crescimento acelerado com investimentos sociais
‚Ä¢ Norte: Potencial de crescimento com investimentos em infraestrutura

üí° **Recomenda√ß√£o**: Priorizar investimentos em educa√ß√£o e sa√∫de para estados com IDH abaixo de 0,700."""

            # An√°lise por estados/regi√µes
            elif any(word in message_lower for word in ['estados', 'regioes', 'regi√µes', 'regional', 'comparar', 'compare']):
                return f"""üó∫Ô∏è **An√°lise Regional dos Estados Brasileiros**

üìä **Panorama atual** ({metrics.get('total_registros', 'N/A')} registros):

ü•á **Melhores IDH:**
‚Ä¢ S√£o Paulo, Rio de Janeiro, Santa Catarina
‚Ä¢ IDH m√©dio: 0,780+

üìà **Crescimento acelerado:**
‚Ä¢ Cear√°, Pernambuco, Bahia
‚Ä¢ Investimentos sociais crescentes

‚ö†Ô∏è **Necessitam aten√ß√£o:**
‚Ä¢ Estados amaz√¥nicos
‚Ä¢ Foco em infraestrutura b√°sica

üí∞ **Efici√™ncia de gastos:**
‚Ä¢ Sul/Sudeste: Alta efici√™ncia
‚Ä¢ Nordeste: Melhoria constante
‚Ä¢ Norte: Potencial subutilizado

Use as visualiza√ß√µes para ver dados espec√≠ficos por estado!"""

            # An√°lise temporal/tend√™ncias
            elif any(word in message_lower for word in ['tempo', 'temporal', 'tendencia', 'tend√™ncia', 'evolucao', 'evolu√ß√£o', 'historico']):
                return f"""üìà **An√°lise Temporal {metrics.get('periodo_texto', '2019-2023')}**

üîç **Tend√™ncias identificadas:**

üìä **IDH Nacional:**
‚Ä¢ Crescimento m√©dio: +2,1% ao ano
‚Ä¢ Todos os estados melhoraram
‚Ä¢ Redu√ß√£o da desigualdade regional

üí∏ **Investimentos P√∫blicos:**
‚Ä¢ Aumento de 15% no per√≠odo
‚Ä¢ Prioriza√ß√£o: Sa√∫de e Educa√ß√£o
‚Ä¢ Digitaliza√ß√£o de servi√ßos

üéØ **Correla√ß√µes temporais:**
‚Ä¢ Investimentos em educa√ß√£o ‚Üí IDH +3 anos
‚Ä¢ Investimentos em sa√∫de ‚Üí IDH +2 anos
‚Ä¢ Infraestrutura ‚Üí IDH +5 anos

üí° **Proje√ß√£o**: Mantendo investimentos atuais, IDH nacional pode alcan√ßar 0,800 em 2027."""

            # An√°lise geral ou resumo
            else:
                return f"""üìã **Resumo Geral dos Dados Dispon√≠veis**

üî¢ **M√©tricas Principais:**
‚Ä¢ **Estados analisados**: {metrics.get('total_estados', 27)}
‚Ä¢ **Per√≠odo**: {metrics.get('periodo_texto', '2019-2023')}
‚Ä¢ **Registros ativos**: {metrics.get('total_registros', 'N/A')}
‚Ä¢ **√öltima atualiza√ß√£o**: {metrics.get('ultima_atualizacao', 'Recente')}

üìä **Dados Dispon√≠veis:**
‚Ä¢ IDH por estado e munic√≠pio
‚Ä¢ Despesas p√∫blicas federais detalhadas
‚Ä¢ Indicadores socioecon√¥micos
‚Ä¢ Dados geoespaciais

üîç **An√°lises Poss√≠veis:**
‚Ä¢ Correla√ß√µes IDH vs Investimentos
‚Ä¢ Compara√ß√µes regionais
‚Ä¢ Tend√™ncias temporais
‚Ä¢ Efici√™ncia de gastos p√∫blicos
‚Ä¢ Proje√ß√µes e recomenda√ß√µes

üí° **Pr√≥ximos passos:**
Use os bot√µes de "An√°lises R√°pidas" ou me fa√ßa perguntas espec√≠ficas sobre:
‚Ä¢ Estados ou regi√µes espec√≠ficas
‚Ä¢ Correla√ß√µes entre vari√°veis
‚Ä¢ Tend√™ncias temporais
‚Ä¢ Recomenda√ß√µes estrat√©gicas

Em que posso ajud√°-lo especificamente?"""
            
        except Exception as e:
            return f"""Desculpe, ocorreu um erro ao acessar os dados: {str(e)}

ü§ñ **Sistema ativo**, mas com limita√ß√µes tempor√°rias.

Posso ainda ajudar com:
‚Ä¢ Informa√ß√µes gerais sobre an√°lise de dados
‚Ä¢ Explica√ß√µes sobre correla√ß√µes IDH vs Despesas
‚Ä¢ Metodologias de an√°lise socioecon√¥mica

Tente novamente em alguns momentos ou use as an√°lises r√°pidas."""

    def _show_thinking(self):
        """Mostra indicador de que a IA est√° pensando"""
        self.is_thinking = True
        self._add_message("IA", "ü§î Pensando...", "system")
        
    def _show_ai_response(self, response):
        """Mostra resposta da IA"""
        self.is_thinking = False
        
        # Remover mensagem de "pensando"
        if self.chat_history and self.chat_history[-1]['message'] == "ü§î Pensando...":
            self.chat_history.pop()
            
            # Recriar o chat sem a mensagem de pensando
            self.chat_text.config(state=tk.NORMAL)
            self.chat_text.delete("1.0", tk.END)
            
            # Recriar todas as mensagens exceto a √∫ltima (pensando)
            for msg in self.chat_history:
                self.chat_text.insert(tk.END, f"[{msg['timestamp']}] ", "timestamp")
                self.chat_text.insert(tk.END, f"{msg['sender']}: ", msg['tag'])
                self.chat_text.insert(tk.END, f"{msg['message']}\n\n")
            
            self.chat_text.config(state=tk.DISABLED)
        
        # Adicionar resposta da IA
        self._add_message("IA", response, "ai")

    def on_input_changed(self, event=None):
        """Callback para mudan√ßa no texto de entrada"""
        text = self.input_text.get("1.0", tk.END)
        char_count = len(text.strip())
        
        self.char_count_label.config(text=f"{char_count}/500")
        
        # Mudar cor se pr√≥ximo do limite
        if char_count > 450:
            self.char_count_label.config(foreground=self.styling.colors['danger'])
        elif char_count > 400:
            self.char_count_label.config(foreground=self.styling.colors['warning'])
        else:
            self.char_count_label.config(foreground=self.styling.colors['text_secondary'])
            
    def clear_chat(self):
        """Limpa o hist√≥rico do chat"""
        if self.main_window.message_helper.ask_yes_no("Deseja limpar todo o hist√≥rico do chat?"):
            self.chat_text.config(state=tk.NORMAL)
            self.chat_text.delete("1.0", tk.END)
            self.chat_text.config(state=tk.DISABLED)
            
            self.chat_history.clear()
            self._add_welcome_message()
            
            self.main_window.update_status("Chat limpo")
            
    def export_chat(self):
        """Exporta hist√≥rico do chat"""
        if not self.chat_history:
            self.main_window.message_helper.show_info("N√£o h√° hist√≥rico para exportar")
            return
            
        # Aqui implementar√≠amos a exporta√ß√£o
        self.main_window.message_helper.show_info("Funcionalidade de exporta√ß√£o ser√° implementada")
        
    def cleanup(self):
        """Limpa recursos quando a sidebar √© destru√≠da"""
        self._cancel_contract_timer()

    def _setup_hover_events(self):
        """Configura eventos de hover para expans√£o da sidebar"""

        
        def on_enter(event):

            self.mouse_in_sidebar = True
            self._cancel_contract_timer()
            
            # Garantir sincroniza√ß√£o de estado antes de expandir
            self._sync_expansion_state()
            
            if not self.is_expanded:
                self.expand_sidebar()
            
        def on_leave(event):
            # Verificar se o mouse realmente saiu da sidebar (n√£o apenas mudou de widget filho)
            try:
                x, y = self.parent.winfo_pointerxy()
                widget_under_mouse = self.parent.winfo_containing(x, y)
                
                if widget_under_mouse and (widget_under_mouse == self.parent or 
                                         str(widget_under_mouse).startswith(str(self.parent))):
                    # Mouse ainda est√° sobre a sidebar ou seus filhos
                    return
            except Exception as e:
                pass
                
            self.mouse_in_sidebar = False
            self._schedule_contract()
            
        # Aguardar um momento para garantir que o layout esteja pronto
        def setup_bindings():
            try:
                # Bind eventos para o frame principal
                self.parent.bind("<Enter>", on_enter)
                self.parent.bind("<Leave>", on_leave)
                
                # Bind para todos os widgets filhos tamb√©m
                def bind_recursive(widget):
                    try:
                        widget.bind("<Enter>", on_enter)
                        widget.bind("<Leave>", on_leave)
                        for child in widget.winfo_children():
                            bind_recursive(child)
                    except:
                        pass
                
                # Bind para o container principal e seus filhos
                bind_recursive(self.main_container)
                
                # Bind para o root tamb√©m para evitar perda de foco
                if hasattr(self.main_window, 'root'):
                    self.main_window.root.bind("<FocusIn>", self._ensure_sidebar_visible)
                
                # Bind adicional para mudan√ßas de aba
                if hasattr(self.main_window, 'notebook'):
                    self.main_window.notebook.bind("<<NotebookTabChanged>>", self._on_tab_change_sync)
                

                
            except Exception as e:
                pass
        
        # Configurar bindings ap√≥s um pequeno delay para garantir que layout esteja pronto
        self.parent.after(100, setup_bindings)
        
    def _ensure_sidebar_visible(self, event=None):
        """Garante que a sidebar permane√ßa vis√≠vel e acess√≠vel"""
        if not hasattr(self, 'parent') or not self.parent.winfo_exists():
            return
            
        # Reconfigurar para garantir que a sidebar seja vis√≠vel
        try:
            # Verificar se o frame ainda existe
            if hasattr(self.main_window, 'sidebar_frame') and self.main_window.sidebar_frame.winfo_exists():
                self.main_window.sidebar_frame.pack_forget()
                self.main_window.sidebar_frame.pack(side=RIGHT, fill=Y)
                self.main_window.sidebar_frame.pack_propagate(False)
                
                # Garantir largura correta
                if hasattr(self.main_window, 'sidebar_expanded') and self.main_window.sidebar_expanded:
                    self.main_window.sidebar_frame.config(width=self.main_window.sidebar_expanded_width)
                else:
                    self.main_window.sidebar_frame.config(width=self.main_window.sidebar_contracted_width)
                    

        except Exception as e:
            pass
        
    def _schedule_contract(self):
        """Agenda contra√ß√£o da sidebar com delay"""
        self._cancel_contract_timer()
        # Aguardar 500ms antes de contrair para evitar piscar
        self.hover_timer = self.parent.after(500, self._delayed_contract)
        
    def _cancel_contract_timer(self):
        """Cancela timer de contra√ß√£o"""
        if self.hover_timer:
            self.parent.after_cancel(self.hover_timer)
            self.hover_timer = None
            
    def _delayed_contract(self):
        """Contrai sidebar apenas se mouse n√£o estiver mais sobre ela"""
        try:
            if not self.mouse_in_sidebar and self.is_expanded:

                self.contract_sidebar()
            else:
                if not self.is_expanded:
                    pass
                else:
                    pass
            self.hover_timer = None
        except Exception as e:
            pass
            self.hover_timer = None
        
    # M√©todo recursivo removido - n√£o √© mais necess√°rio
            
    def expand_sidebar(self):
        """Expande a sidebar"""
        if not self.is_expanded:
            try:
                # Verificar se o frame ainda existe
                if not hasattr(self.main_window, 'sidebar_frame'):
                    return
                
                if not self.main_window.sidebar_frame.winfo_exists():
                    return
                
                # Atualizar estados
                self.is_expanded = True
                self.main_window.sidebar_expanded = True
                
                # Configurar largura do frame COM FOR√áA
                target_width = self.main_window.sidebar_expanded_width
                
                # FOR√áAR LAYOUT PRESERVANDO PLACE OVERRIDE
                # Tentativa 1: Config direto (preserva place se existir)
                self.main_window.sidebar_frame.config(width=target_width)
                
                # Tentativa 2: Verificar se precisa de place override
                self.main_window.root.update_idletasks()
                check_width = self.main_window.sidebar_frame.winfo_width()
                
                if check_width < target_width * 0.8:
                    # Aplicar/reaplicar place override para expans√£o
                    try:
                        container_width = self.main_window.content_container.winfo_width()
                        container_height = self.main_window.content_container.winfo_height()
                        
                        if container_width > target_width:
                            sidebar_x = container_width - target_width
                            self.main_window.sidebar_frame.place(
                                x=sidebar_x, 
                                y=0, 
                                width=target_width, 
                                height=container_height
                            )
                        
                    except Exception as place_error:
                        pass
                
                # Mostrar conte√∫do expandido
                self._set_expanded_mode()
                
                # For√ßar atualiza√ß√£o visual m√∫ltipla
                self.parent.update_idletasks()
                self.main_window.root.update_idletasks()
                
                # Verifica√ß√£o e corre√ß√£o final robusta
                def final_layout_check():
                    try:
                        current_width = self.main_window.sidebar_frame.winfo_width()
                        current_viewable = self.main_window.sidebar_frame.winfo_viewable()
                        
                        if current_width < target_width * 0.8 or not current_viewable:
                            # Aplicar corre√ß√£o final se necess√°rio
                            try:
                                container_width = self.main_window.content_container.winfo_width()
                                container_height = self.main_window.content_container.winfo_height()
                                
                                if container_width > target_width:
                                    sidebar_x = container_width - target_width
                                    self.main_window.sidebar_frame.place(
                                        x=sidebar_x, 
                                        y=0, 
                                        width=target_width, 
                                        height=container_height
                                    )
                                    
                                    # Verificar resultado final
                                    self.main_window.root.update_idletasks()
                                    final_width = self.main_window.sidebar_frame.winfo_width()
                                    final_viewable = self.main_window.sidebar_frame.winfo_viewable()
                                    
                            except Exception as place_error:
                                pass
                        
                    except Exception as e:
                        pass
                
                # Agendar verifica√ß√£o final ap√≥s breve delay
                self.parent.after(100, final_layout_check)
                
                # Verificar geometria depois
                try:
                    post_width = self.main_window.sidebar_frame.winfo_width()
                    post_viewable = self.main_window.sidebar_frame.winfo_viewable()
                    
                except Exception as geo_e:
                    pass
                
            except Exception as e:
                pass
    
    def contract_sidebar(self):
        """Contrai a sidebar"""
        if self.is_expanded:
            try:
                # Atualizar estados
                self.is_expanded = False
                self.main_window.sidebar_expanded = False
                
                # Tentar remover place override primeiro (se existir)
                try:
                    place_info = self.main_window.sidebar_frame.place_info()
                    if place_info:
                        self.main_window.sidebar_frame.place_forget()
                except:
                    pass
                
                # Aplicar largura contra√≠da
                target_width = self.main_window.sidebar_contracted_width
                
                # For√ßar pack com largura contra√≠da
                self.main_window.sidebar_frame.config(width=target_width)
                self.main_window.sidebar_frame.pack(side=RIGHT, fill=Y)
                self.main_window.sidebar_frame.pack_propagate(False)
                
                # Mostrar conte√∫do contra√≠do
                self._set_collapsed_mode()
                
                # For√ßar atualiza√ß√£o visual
                self.parent.update_idletasks()
                self.main_window.root.update_idletasks()
                
                # Verificar se contra√ß√£o funcionou
                try:
                    final_width = self.main_window.sidebar_frame.winfo_width()
                    final_viewable = self.main_window.sidebar_frame.winfo_viewable()
                    
                    # Se pack n√£o funcionou adequadamente, aplicar place override como fallback
                    if final_width > target_width * 1.5 or not final_viewable:
                        try:
                            # Aplicar place override para contra√ß√£o
                            container_width = self.main_window.content_container.winfo_width()
                            container_height = self.main_window.content_container.winfo_height()
                            
                            if container_width > target_width:
                                sidebar_x = container_width - target_width
                                self.main_window.sidebar_frame.place(
                                    x=sidebar_x, 
                                    y=0, 
                                    width=target_width, 
                                    height=container_height
                                )
                                
                                # Verificar resultado final com place
                                self.main_window.root.update_idletasks()
                                final_width_place = self.main_window.sidebar_frame.winfo_width()
                                final_viewable_place = self.main_window.sidebar_frame.winfo_viewable()
                                
                        except Exception as place_error:
                            pass
                        
                except Exception as geo_e:
                    pass
                
            except Exception as e:
                pass
            
    def _sync_expansion_state(self):
        """Sincroniza o estado de expans√£o entre sidebar e main_window"""
        try:
            main_window_expanded = getattr(self.main_window, 'sidebar_expanded', False)
            sidebar_expanded = getattr(self, 'is_expanded', False)
            
            # Se os estados n√£o coincidirem, usar o estado da main_window como verdade
            if main_window_expanded != sidebar_expanded:
                print(f"üîÑ Sincronizando estado: MainWindow={main_window_expanded}, Sidebar={sidebar_expanded}")
                
                if main_window_expanded:
                    self.is_expanded = True
                    self._set_expanded_mode()
                    self.main_window.sidebar_frame.config(width=self.main_window.sidebar_expanded_width)
                else:
                    self.is_expanded = False
                    self._set_collapsed_mode()
                    self.main_window.sidebar_frame.config(width=self.main_window.sidebar_contracted_width)
                    
                pass  # Estado sincronizado
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na sincroniza√ß√£o de estado: {e}")
            
    def _on_tab_change_sync(self, event=None):
        """Callback para sincroniza√ß√£o ap√≥s mudan√ßa de aba"""
        # Aguardar um momento para garantir que a reconfigura√ß√£o termine
        self.parent.after(100, self._sync_expansion_state)
        # Verifica√ß√£o adicional ap√≥s mais tempo
        self.parent.after(300, self._sync_expansion_state)
        
    def _setup_persistent_monitor(self):
        """Configura monitoramento persistente da sidebar"""
        def monitor_sidebar():
            try:
                # Verificar se a sidebar ainda existe
                if not hasattr(self, 'parent') or not self.parent.winfo_exists():
                    return
                
                # Sincronizar estado periodicamente
                self._sync_expansion_state()
                
                # Agendar pr√≥xima verifica√ß√£o em 3 segundos  
                self.parent.after(3000, monitor_sidebar)
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro no monitor persistente: {e}")
                
        # Iniciar monitoramento ap√≥s 2 segundos
        self.parent.after(2000, monitor_sidebar)
