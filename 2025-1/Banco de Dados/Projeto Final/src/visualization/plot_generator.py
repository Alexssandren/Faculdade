"""
Gerador de Visualiza√ß√µes - Sistema DEC7588
Gera gr√°ficos e mapas a partir dos dados do banco
"""

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import pandas as pd
import numpy as np
import os
import sqlite3
from pathlib import Path

# Configura√ß√µes
DB_FILE = "data/processed/dados_socioeconomicos.db"
OUTPUT_DIR = "outputs/visualizations"
SHAPEFILE_PATH = "data/geospatial/BR_UF_2024.shp"
GEOJSON_FILE = "data/geospatial/BR_UF_2024.geojson"

# Mapear cores para categorias
CORES_CATEGORIA = {
    "Sa√∫de": "#FF6B6B",
    "Educa√ß√£o": "#4ECDC4", 
    "Assist√™ncia Social": "#45B7D1",
    "Previd√™ncia Social": "#96CEB4",
    "Trabalho": "#FFEAA7",
    "Defesa Nacional": "#DDA0DD",
    "Judici√°rio": "#F39C12",
    "Legislativo": "#E74C3C"
}

def main():
    """Fun√ß√£o principal para gerar todas as visualiza√ß√µes"""
    
    # Verificar se o banco existe
    if not os.path.exists(DB_FILE):
        print(f"‚ùå ERRO: Banco de dados {DB_FILE} n√£o encontrado. "
              f"Execute o script de importa√ß√£o primeiro.")
        return
    
    # Tentar carregar dados
    try:
        df = load_data_from_db()
        if df.empty:
            print("‚ùå Nenhum dado encontrado no banco.")
            return
        
        print(f"‚úÖ Dados carregados com sucesso da tabela 'analise_unificada' ({len(df)} registros).")
        
        # Preparar dados
        df = prepare_data(df)
        
        # Criar diret√≥rio de output se n√£o existir
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        
        # Gerar visualiza√ß√µes espec√≠ficas removidas
        print("üìä Gera√ß√£o de mapas de calor removida - foco em dados tabulares.")
        
        # Gerar gr√°ficos de bolhas removidos
        print("üìä Gera√ß√£o de gr√°ficos de bolhas removida - foco em dados tabulares.")
        
        # Gerar mapas coropl√©ticos removidos
        print("üìä Gera√ß√£o de mapas coropl√©ticos removida - foco em dados tabulares.")
        
        # Gerar mapas coropl√©ticos se dados geoespaciais dispon√≠veis
        try:
            if df.empty:
                print("‚ÑπÔ∏è DataFrame vazio, pulando gera√ß√£o dos mapas coropl√©ticos.")
                return
                
            # Verificar se shapefile existe
            if not os.path.exists(SHAPEFILE_PATH):
                print(f"‚ùå ERRO: Shapefile {SHAPEFILE_PATH} n√£o encontrado. Mapas coropl√©ticos n√£o podem ser gerados.")
                
                # Tentar geojson como fallback
                if os.path.exists(GEOJSON_FILE):
                    print(f"‚ÑπÔ∏è Tentando usar {GEOJSON_FILE} como fallback.")
                else:
                    print(f"‚ùå ERRO: Arquivo {GEOJSON_FILE} tamb√©m n√£o encontrado.")
                    return
            
            generate_choropleth_maps(df)
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar mapas coropl√©ticos: {e}")
        
    except Exception as e:
        print(f"‚ùå ERRO ao carregar dados do banco de dados: {e}")

def generate_choropleth_maps(df):
    """Gera mapas coropl√©ticos usando geopandas"""
    try:
        import geopandas as gpd
        
        # Ler shapefile
        print(f"üó∫Ô∏è Lendo shapefile de {SHAPEFILE_PATH}")
        gdf = gpd.read_file(SHAPEFILE_PATH)
        
        # Mapas coropl√©ticos
        print("üó∫Ô∏è Gerando Mapas Coropl√©ticos Interativos...")
        
        # Verificar se a coluna 'uf' existe no shapefile, sen√£o tentar outras possibilidades
        if 'uf' not in gdf.columns:
            if 'SIGLA_UF' in gdf.columns:
                gdf = gdf.rename(columns={'SIGLA_UF': 'uf'})
            elif 'CD_UF' in gdf.columns:
                print("‚ö†Ô∏è Shapefile n√£o tem 'uf' ou 'SIGLA_UF'. Tentando 'CD_UF' e esperando que o merge funcione ou necessite de mapeamento.")
                # Pode precisar de mapeamento adicional entre c√≥digos e siglas
            else:
                print("‚ùå ERRO: Coluna 'uf' (ou equivalente como 'SIGLA_UF') n√£o encontrada no GeoDataFrame ap√≥s tentativas de renomear.")
                return
        
        # Determinar ano para o mapa (usar o √∫ltimo dispon√≠vel)
        if 'ano' in df.columns and not df['ano'].isna().all():
            anos_disponiveis = sorted(df['ano'].dropna().unique())
            ano_para_mapa = anos_disponiveis[-1] if anos_disponiveis else None
        else:
            ano_para_mapa = None
        
        if ano_para_mapa is None:
            print("‚ùå N√£o h√° anos √∫nicos no dataset para gerar mapas.")
            return
            
        # Filtrar dados para o ano espec√≠fico
        df_ano = df[df['ano'] == ano_para_mapa].copy() if 'ano' in df.columns else df.copy()
        
        # Gerar mapa de IDH
        if 'idh_geral' in df_ano.columns and 'uf' in df_ano.columns:
            df_idh = df_ano.groupby('uf')['idh_geral'].mean().reset_index()
            gdf_merged = gdf.merge(df_idh, on='uf', how='left')
            
            fig, ax = plt.subplots(1, 1, figsize=(15, 10))
            gdf_merged.plot(column='idh_geral', cmap='YlOrRd', legend=True, ax=ax, 
                          missing_kwds={'color': 'lightgrey'})
            ax.set_title(f'IDH por Estado - {ano_para_mapa}', fontsize=16, fontweight='bold')
            ax.axis('off')
            
            output_path_idh = os.path.join(OUTPUT_DIR, f'mapa_idh_{ano_para_mapa}.png')
            plt.tight_layout()
            plt.savefig(output_path_idh, dpi=300, bbox_inches='tight')
            plt.close()
            print(f"‚úÖ Mapa Coropl√©tico (IDH {ano_para_mapa}) salvo em: {output_path_idh}")
        
        # Gerar mapas por categoria de gasto
        categorias = df_ano['categoria_nome'].unique() if 'categoria_nome' in df_ano.columns else []
        for categoria in categorias[:3]:  # Limitar a 3 categorias principais
            categoria_nome_amigavel = categoria.replace(" ", "_").replace("/", "_")
            df_cat = df_ano[df_ano['categoria_nome'] == categoria]
            
            if df_cat.empty or 'valor_milhoes' not in df_cat.columns:
                print(f"    ‚ö†Ô∏è Dados de gasto para '{categoria_nome_amigavel}' ausentes no ano {ano_para_mapa}. Pulando mapas de gasto e rela√ß√£o.")
                continue
            
            # Mapa de gastos por categoria
            df_gastos = df_cat.groupby('uf')['valor_milhoes'].sum().reset_index()
            gdf_merged_gastos = gdf.merge(df_gastos, on='uf', how='left')
            
            fig, ax = plt.subplots(1, 1, figsize=(15, 10))
            gdf_merged_gastos.plot(column='valor_milhoes', cmap='Blues', legend=True, ax=ax,
                                 missing_kwds={'color': 'lightgrey'})
            ax.set_title(f'Gastos {categoria} por Estado - {ano_para_mapa} (em Milh√µes R$)', 
                        fontsize=14, fontweight='bold')
            ax.axis('off')
            
            output_path_gasto = os.path.join(OUTPUT_DIR, f'mapa_gastos_{categoria_nome_amigavel}_{ano_para_mapa}.png')
            plt.tight_layout()
            plt.savefig(output_path_gasto, dpi=300, bbox_inches='tight')
            plt.close()
            print(f"‚úÖ Mapa Coropl√©tico (Gasto {categoria_nome_amigavel} {ano_para_mapa}) salvo em: {output_path_gasto}")
            
            # Mapa de rela√ß√£o IDH/Gastos
            if 'idh_geral' in df_cat.columns:
                df_relacao = df_cat.groupby('uf').agg({
                    'idh_geral': 'mean',
                    'valor_milhoes': 'sum'
                }).reset_index()
                df_relacao['relacao_idh_gasto'] = df_relacao['idh_geral'] / (df_relacao['valor_milhoes'] / 1000)
                
                gdf_merged_rel = gdf.merge(df_relacao, on='uf', how='left')
                
                fig, ax = plt.subplots(1, 1, figsize=(15, 10))
                gdf_merged_rel.plot(column='relacao_idh_gasto', cmap='RdYlGn', legend=True, ax=ax,
                                  missing_kwds={'color': 'lightgrey'})
                ax.set_title(f'Rela√ß√£o IDH/Gasto {categoria} por Estado - {ano_para_mapa}', 
                            fontsize=14, fontweight='bold')
                ax.axis('off')
                
                output_path_rel = os.path.join(OUTPUT_DIR, f'mapa_relacao_idh_gasto_{categoria_nome_amigavel}_{ano_para_mapa}.png')
                plt.tight_layout()
                plt.savefig(output_path_rel, dpi=300, bbox_inches='tight')
                plt.close()
                print(f"‚úÖ Mapa Coropl√©tico (Rela√ß√£o IDH/Gasto {categoria_nome_amigavel} {ano_para_mapa}) salvo em: {output_path_rel}")
    
    except ImportError:
        print("‚ùå GeoPandas n√£o est√° instalado. Instale com: pip install geopandas")
    except Exception as e:
        print(f"‚ùå Erro ao gerar mapas coropl√©ticos: {e}")

def load_data_from_db():
    """Carrega dados do banco SQLite"""
    conn = sqlite3.connect(DB_FILE)
    
    # Tentar carregar a tabela analise_unificada ou fazer join das tabelas necess√°rias
    query = """
    SELECT * FROM analise_unificada 
    ORDER BY ano, uf, categoria_nome
    LIMIT 10000
    """
    
    df = pd.read_sql_query(query, conn)
    conn.close()
    
    return df

def prepare_data(df):
    """Prepara e limpa os dados"""
    
    # Converter colunas num√©ricas
    numeric_columns = ['valor_milhoes', 'idh_geral', 'idh_educacao', 'idh_longevidade', 'idh_renda']
    for col in numeric_columns:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        else:
            print(f"‚ö†Ô∏è Aten√ß√£o: Coluna {col} esperada para convers√£o num√©rica n√£o encontrada no DataFrame.")
    
    # Remover linhas com valores cr√≠ticos faltando
    df = df.dropna(subset=['uf'])
    
    return df

if __name__ == "__main__":
    print("üöÄ Iniciando Gera√ß√£o de Visualiza√ß√µes Avan√ßadas...")
    
    try:
        main()
    except Exception as e:
        print(f"‚ùå Erro geral na execu√ß√£o: {e}")
    else:
        print("‚úÖ Gera√ß√£o de visualiza√ß√µes conclu√≠da!")
    
    print("üìä Para executar apenas as consultas principais, use:")
    print("python -m src.queries.analytics_queries")
    
    if not os.path.exists(DB_FILE):
        print("‚ùå N√£o foi poss√≠vel carregar os dados. Gera√ß√£o de visualiza√ß√µes abortada.") 