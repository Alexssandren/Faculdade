#!/usr/bin/env python3
"""
Projeto Final - Banco de Dados
An√°lise IDH vs Despesas P√∫blicas Federais (2019-2023)

Interface gr√°fica moderna com:
- Dashboard interativo
- Visualiza√ß√µes anal√≠ticas
- Sistema CRUD completo
- Chat IA integrado

Vers√£o: 2.0.0 (GUI)
"""

import sys
import os
import traceback
from pathlib import Path

# Suprimir avisos espec√≠ficos do Qt/DPI no Windows
if sys.platform == "win32":
    os.environ["QT_ENABLE_HIGHDPI_SCALING"] = "1"
    os.environ["QT_SCALE_FACTOR_ROUNDING_POLICY"] = "RoundPreferFloor"
    # Suprimir avisos de DPI no stderr
    import warnings
    warnings.filterwarnings("ignore", category=UserWarning, module="qt")

# Adicionar src ao path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def main():
    """Fun√ß√£o principal - inicia a aplica√ß√£o GUI"""
    try:
        # Importar e iniciar a aplica√ß√£o GUI
        from src.gui.main_window import MainWindow
        
        print("üöÄ Iniciando Projeto Final - Banco de Dados...")
        
        # Criar e executar aplica√ß√£o
        app = MainWindow()
        app.run()
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        
        # Verificar se as depend√™ncias est√£o instaladas
        missing_deps = []
        
        try:
            import ttkbootstrap
        except ImportError:
            missing_deps.append("ttkbootstrap")
            
        try:
            import matplotlib
        except ImportError:
            missing_deps.append("matplotlib")
            
        try:
            import numpy
        except ImportError:
            missing_deps.append("numpy")
            
        if missing_deps:
            print(f"‚ùå Depend√™ncias ausentes: {', '.join(missing_deps)}")
            print("\nüí° Instale as depend√™ncias com:")
            print("pip install -r requirements.txt")
        else:
            print("‚úÖ Todas as depend√™ncias est√£o instaladas")
            print(f"‚ùå Erro espec√≠fico: {e}")
            
        return 1
            
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        return 1
            
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 
    